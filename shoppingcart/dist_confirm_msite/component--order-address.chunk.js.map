{"version":3,"sources":["webpack:///./src/components/msite/full-fixed.jsx","webpack:///./src/components/msite/control.jsx","webpack:///./src/components/validator.jsx","webpack:///./src/components/msite/styled-control.jsx","webpack:///./src/pages/order-address.jsx","webpack:///./src/components/msite/address-form.jsx"],"names":["__webpack_require__","d","f","c","e","__esModule","default","p","t","Object","freeze","defineProperties","raw","value","Fixed","styled","div","_templateObject","HD","_templateObject2","Title","h1","_templateObject3","Close","span","_templateObject4","BD","_templateObject5","_class","props","TypeError","this","__proto__","getPrototypeOf","call","React","Component","document","body","style","overflow","key","_react2","createElement","title","onClick","onClose","_icon2","fontSize","cursor","children","o","a","_reactValidation","u","n","indexOf","prototype","hasOwnProperty","Form","form","_ref","getValues","validate","validateAll","showError","hideError","_objectWithoutProperties","Input","control","_ref2","error","isChanged","isUsed","divStyle","className","_extends","Select","_ref4","Button","button","_ref3","hasErrors","disabled","ingoredisable","r","l","__reg_zip_us__","__reg_zip_uk__","__reg_zip_br__","__reg_phone_normal__","__reg_phone_br__","__reg_phone_ae_","__reg_phone_sa_","cpfcheck","result","replace","invalidos","i","length","add","parseInt","charAt","rev","required","toString","trim","number","validator","isInt","min","max","email","isEmail","cpf","zip","components","reg","country","test","phone","StyledControl","inputColor","InlineStyledControl","554","defineProperty","assign","arguments","enumerable","configurable","writable","g","s","_reactRedux","_actions","_api","_reactIntl","Modal","_this","close","bind","editAddress","create","constructor","setPrototypeOf","_createClass","history","window","ctx","transaction","transactionId","address","_this2","updateorderaddress","id","then","REFRESHORDERCONFIRM","catch","alert","_props","intl","FormBody","_fullFixed2","formatMessage","_addressForm2","marginTop","connect","state","shippingDetail","dispatch","fetchTransaction","injectIntl","_control","_validator","_styledControl","_layout","getCountryCode","lang","split","AdressForm","isEdit","name","streetAddress1","unit","city","zipCode","phoneNumber","defaultAddress","countries","states","phoneArea","hasValidated","handleInputChange","event","target","type","checked","strs","splice","join","slice","setState","getStates","preventDefault","addressButtn","brForm","brAddressButtn","alForm","alAddressButtn","context","_errors","_state","newProps","initAddress","isDefaultAddress","countryValue","getCountries","_this3","needInitValidate","_this4","isNormalAddress","display","ref","formRef","onSubmit","handleSubmit","FormLayout","onChange","validations","placeholder","MultiControl","evt","changeCountry","map","label","backgroundColor","color","height","lineHeight","textAlign","outline","border","width","marginRight","paddingLeft","maxLength","verticalAlign","paddingTop"],"mappings":"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","file":"component--order-address.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Icon from '../icon.jsx'\r\n\r\nconst Fixed = styled.div`\r\n\tposition: relative;\r\n\t\r\n`\r\n\r\nconst HD = styled.div`\r\n\theight: 50px;\r\n\tline-height: 50px;\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\twidth: 100%;\r\n\tbackground-color: #fff;\r\n\tz-index: 10;\r\n`\r\n\r\nconst Title = styled.h1`\r\n\tfont-size: 18px;\r\n\tfont-weight: 400;\r\n\ttext-align: center;\r\n`\r\n\r\nconst Close = styled.span`\r\n\tdisplay: inline-block;\r\n\tposition: absolute;\r\n\tright: 10px;\r\n\ttop: 0;\r\n\tcursor: pointer;\r\n`\r\n\r\nconst BD = styled.div`\r\n\theight: 100vh;\r\n\toverflow: auto;\r\n\tpadding-top: 50px;\r\n\t-webkit-overflow-scrolling: touch;\r\n`\r\n\r\n// export default (props) => <Fixed>\r\n//   <HD>\r\n//     <Title>{props.title}</Title>\r\n//     <Close onClick={props.onClose}><Icon style={{fontSize: 25, cursor: 'pointer'}}>&#xe69a;</Icon></Close>\r\n//   </HD>\r\n\r\n//   <BD>\r\n//   \t{props.children}\r\n//   </BD>\r\n// </Fixed>\r\n\r\nexport default class extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n  }\r\n\r\n  componentWillMount () {\r\n    document.body.style.overflow = 'hidden'\r\n  }\r\n  componentWillUnmount () {\r\n    document.body.style.overflow = 'auto'\r\n  }\r\n\r\n  render () {\r\n    const props = this.props\r\n    return <Fixed>\r\n\t\t  <HD>\r\n\t\t    <Title>{props.title}</Title>\r\n\t\t    <Close onClick={props.onClose}><Icon style={{fontSize: 25, cursor: 'pointer'}}>&#xe69a;</Icon></Close>\r\n\t\t  </HD>\r\n\r\n\t\t  <BD>\r\n\t\t  \t{props.children}\r\n\t\t  </BD>\r\n    </Fixed>\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { form, control, button } from 'react-validation'\r\n\r\nconst _form = ({ getValues, validate, validateAll, showError, hideError, children, ...props }) => ( // destruct non-valid props\r\n  <form {...props}>{children}</form>\r\n)\r\n\r\nconst _input = ({ error, isChanged, isUsed, divStyle, ...props }) => (\r\n  <div className={isChanged && isUsed && error ? 'error' : ''} style={divStyle}>\r\n    <input {...props} className=\"x-default-input\"/>\r\n    <p>{isChanged && isUsed && error}</p>\r\n  </div>\r\n)\r\n\r\nconst _button = ({ hasErrors, ...props }) => {\r\n  return (\r\n    <button {...props} disabled={hasErrors && !props.ingoredisable}/>\r\n  )\r\n}\r\n\r\nconst _select = ({ error, isChanged, isUsed, ...props }) => (\r\n  <div className={isChanged && isUsed && error ? 'error' : ''}>\r\n    <select {...props} />\r\n    <p>{isChanged && isUsed && error}</p>\r\n  </div>\r\n)\r\n\r\nexport const Form = form(_form)\r\nexport const Input = control(_input)\r\nexport const Select = control(_select)\r\nexport const Button = button(_button)\r\n","import React from 'react'\r\nimport validator from 'validator'\r\n\r\nexport const __reg_zip_us__ = /^(([0-9]{5})|([0-9]{5}-[0-9]{4}))$/\r\nexport const __reg_zip_uk__ = /^([a-z]|[A-Z]){1,2}\\w{1,2}\\s{0,1}[0-9]{1}([a-z]|[A-Z]){2}$/\r\nexport const __reg_zip_br__ = /^[0-9]{5}-[0-9]{3}$/\r\n\r\nexport const __reg_phone_normal__ = /^\\d{1,20}$/\r\nexport const __reg_phone_br__ = /^\\d{8,9}$/\r\nexport const __reg_phone_ae_ = /^(50|52|54|55|56|58|2|3|4|6|7|9){1,2}\\d{7}$/\r\nexport const __reg_phone_sa_ = /^(50|53|55|51|58|59|54|56|57|11|12|13|14|16|17|811){1,3}\\d{7}$/\r\n\r\nexport const cpfcheck = (value) => {\r\n  var result = true\r\n\r\n  value = value.replace('-', '')\r\n  value = value.replace(/\\./g, '')\r\n\r\n  // this is mostly not needed\r\n  var invalidos = [ '11111111111', '22222222222', '33333333333',\r\n    '44444444444', '55555555555', '66666666666',\r\n    '77777777777', '88888888888', '99999999999',\r\n    '00000000000' ]\r\n\r\n  for (let i = 0; i < invalidos.length; i++) {\r\n    if (invalidos[i] == value) {\r\n      result = false\r\n    }\r\n  }\r\n\r\n  if (value.length > 11) {\r\n    result = false\r\n  }\r\n\r\n  // validando primeiro digito\r\n  let add = 0\r\n  for (let i = 0; i < 9; i++) {\r\n    add += parseInt(value.charAt(i), 10) * (10 - i)\r\n  }\r\n  let rev = 11 - (add % 11)\r\n  if (rev == 10 || rev == 11) {\r\n    rev = 0\r\n  }\r\n  if (rev != parseInt(value.charAt(9), 10)) {\r\n    result = false\r\n  }\r\n\r\n  // validando segundo digito\r\n  add = 0\r\n  for (let i = 0; i < 10; i++) {\r\n    add += parseInt(value.charAt(i), 10) * (11 - i)\r\n  }\r\n  rev = 11 - (add % 11)\r\n  if (rev == 10 || rev == 11) {\r\n    rev = 0\r\n  }\r\n  if (rev != parseInt(value.charAt(10), 10)) {\r\n    result = false\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport const required = (value) => {\r\n  if (!value || !value.toString().trim().length) {\r\n    return 'required'\r\n  }\r\n}\r\n\r\nexport const number = (value) => {\r\n  if (value && !validator.isInt(value, {min: 0, max: 99})) {\r\n    return <p></p>\r\n  }\r\n}\r\n\r\nexport const email = (value) => {\r\n  if (!validator.isEmail(value)) {\r\n    return <p>{value} is not a valid email</p>\r\n  }\r\n}\r\n\r\nexport const cpf = (value) => {\r\n  if (!cpfcheck(value)) { return <p>{value} is not a valid cpf</p> }\r\n}\r\n\r\nexport const zip = (value, props, components) => {\r\n  const country = components['country'][0].value\r\n  let reg, error\r\n  switch (country) {\r\n  \tcase 'US':\r\n  \t\treg = __reg_zip_us__\r\n  \t\terror = `Please enter 5 digits or 5 digits with a 4-digits number (E.g. 20001 or 20001-0000)`\r\n  \t\tbreak\r\n  \tcase 'GB':\r\n  \t\treg = __reg_zip_uk__\r\n  \t\terror = `Wrong ZIP CODE! Please offer us one or two-letter and one-two figures with a space end with one figure and two letters. (e.g. TN37 7HL,CW8 3AD)`\r\n  \t\tbreak\r\n  \tcase 'BR':\r\n  \t\treg = __reg_zip_br__\r\n  \t\terror = `O formato do endereço está incorreto, preencha o formulário de [01310-000]`\r\n  \t\tbreak\r\n  \tdefault:\r\n  \t\tbreak\r\n  }\r\n\r\n  if (reg && !reg.test(value)) {\r\n    return error\r\n  }\r\n}\r\n\r\nexport const phone = (value, props, components) => {\r\n  const country = components['country'][0].value\r\n  let reg, error\r\n  switch (country) {\r\n    case 'BR':\r\n      reg = __reg_phone_br__\r\n      error = `Insira pelo menos 8-9 números.`\r\n      break\r\n    case 'AE':\r\n      reg = __reg_phone_ae_\r\n      error = `Phone numbers should start with 50/52/54/55/56/58/2/3/4/6/7/9, followed by any 7 digits.`\r\n      break\r\n    case 'SA':\r\n      reg = __reg_phone_sa_\r\n      error = `Phone numbers should start with 50/53/55/51/58/59/54/56/57/11/12/13/14/16/17/811, followed by any 7 digits.`\r\n      break\r\n    default:\r\n      reg = __reg_phone_normal__\r\n      error = `Incorrect phone number format (numbers only, no formatting)`\r\n      break\r\n  }\r\n  if (reg && !reg.test(value)) {\r\n    return error\r\n  }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledControl = styled.div`\r\n\tlabel{\r\n\t\tfont-size: 12px;\r\n\t\tmargin-bottom: 5px;\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n\tinput, select{\r\n\t\tborder: 1px solid #666;\r\n\t\toutline: none;\r\n\t\t-webkit-appearance: none;\r\n    \toutline: none;\r\n    \tbox-shadow: none;\r\n    \theight: 35px;\r\n    \twidth: 100%;\r\n    \tpadding-left: 10px;\r\n    \tbackground-color: ${props => props.inputColor || 'transparent'};\r\n\t}\r\n\r\n\r\n\t& .error{\r\n\t\tp{\r\n\t\t\tfont-size: 12px;\r\n\t\t\tmargin-top: 5px;\r\n\t\t\tcolor: #E64545;\r\n\t\t}\r\n\t\tinput, select{\r\n\t\t\tborder: 1px solid #E64545;\r\n    \t\tbox-shadow: inset 0 0 1px #E64545;\r\n\t\t}\r\n\t}\r\n`\r\n\r\nexport const InlineStyledControl = styled.div`\r\n\tdisplay: inline-block;\r\n\tlabel{\r\n\t\tfont-size: 12px;\r\n\t\tmargin-right: 10px;\r\n\t}\r\n\r\n\tinput, select{\r\n\t\tborder: 1px solid #666;\r\n\t\toutline: none;\r\n\t\t-webkit-appearance: none;\r\n    \toutline: none;\r\n    \tbox-shadow: none;\r\n    \theight: 35px;\r\n    \twidth: 100%;\r\n    \tpadding-left: 10px;\r\n    \tbackground-color: ${props => props.inputColor || 'transparent'};\r\n\t}\r\n\r\n\r\n\t& .error{\r\n\t\tp{\r\n\t\t\tfont-size: 12px;\r\n\t\t\tmargin-top: 5px;\r\n\t\t\tcolor: #e5004f;\r\n\t\t}\r\n\t\tinput, select{\r\n\t\t\tborder: 1px solid #e5004f;\r\n    \t\tbox-shadow: inset 0 0 1px #e5004f;\r\n\t\t}\r\n\t}\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { connect } from 'react-redux'\r\nimport {fetchTransaction} from '../store/actions.js'\r\nimport FullFixed from '../components/msite/full-fixed.jsx'\r\nimport AddressForm from '../components/msite/address-form.jsx'\r\nimport {updateorderaddress} from '../api'\r\nimport {injectIntl} from 'react-intl'\r\nimport {__route_root__} from '../utils/utils.js'\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    transaction: state.transaction,\r\n    address: state.transaction ? state.transaction.shippingDetail : null\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    REFRESHORDERCONFIRM: (transactionId) => {\r\n      dispatch(fetchTransaction(transactionId))\r\n    }\r\n  }\r\n}\r\n\r\nconst Modal = class extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.close = this.close.bind(this)\r\n    this.editAddress = this.editAddress.bind(this)\r\n  }\r\n\r\n  close () {\r\n    this.props.history.replace(`${window.ctx || ''}/order-confirm/${this.props.transaction.transactionId}`)\r\n  }\r\n\r\n  editAddress (address) {\r\n    const transactionId = this.props.transaction.transactionId\r\n  \t\tupdateorderaddress({...address, id: this.props.address.id, transactionId: transactionId }).then(() => {\r\n  \t\t\tthis.close()\r\n      this.props.REFRESHORDERCONFIRM(transactionId)\r\n  \t\t}).catch(({result}) => {\r\n  \t\t\talert(result)\r\n  \t\t})\r\n  }\r\n\r\n  render () {\r\n    const { address, intl } = this.props\r\n\r\n    const FormBody = styled.div`\r\n    \tmax-width: 320px;\r\n    \twidth: 80%;\r\n    \tmargin-left: auto;\r\n    \tmargin-right: auto;\r\n      padding-bottom: 50px;\r\n\r\n    `\r\n\r\n    return <FullFixed onClose={this.close} title={intl.formatMessage({id: 'address'})}>\r\n\r\n    \t<FormBody >\r\n\t    \t<p>* {intl.formatMessage({id: 'required_tips'})}</p>\r\n\t    \t<AddressForm editAddress={this.editAddress} style={{marginTop: 15}} address={address}/>\r\n    \t</FormBody>\r\n\r\n    </FullFixed>\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Modal))\r\n","import React from 'react'\r\nimport {Form, Input, Select, Button} from './control.jsx'\r\nimport {required, email, zip, phone, number} from '../validator.jsx'\r\nimport {StyledControl} from './styled-control.jsx'\r\nimport {FormLayout, MultiControl} from './layout.jsx'\r\nimport {getCountries, getStates} from '../../api'\r\nimport {injectIntl} from 'react-intl'\r\n\r\nconst getCountryCode = () => {\r\n  let strs = window.lang ? window.lang.split('_') : []\r\n  return strs[1] || 'US'\r\n}\r\n\r\nconst AdressForm = class extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      isEdit: false,\r\n      name: '',\r\n      streetAddress1: '',\r\n      unit: '',\r\n      city: '',\r\n      zipCode: '',\r\n      state: '',\r\n      country: '',\r\n      phoneNumber: '',\r\n      defaultAddress: false,\r\n      countries: null,\r\n      states: null,\r\n      phoneArea: '',\r\n      hasValidated: false\r\n    }\r\n    this.handleInputChange = this.handleInputChange.bind(this)\r\n  }\r\n\r\n  handleInputChange (event) {\r\n    const target = event.target\r\n    let value = target.type === 'checkbox' ? target.checked : target.value\r\n    const name = target.name\r\n    if (name === 'zipCode' && this.state.country === 'BR') {\r\n      if (value && value.length > 5) {\r\n        var strs = value.replace(/-/ig, '').split('')\r\n        strs.splice(5, 0, '-')\r\n        value = strs.join('')\r\n      }\r\n    }\r\n\r\n    if (name === 'phoneArea') {\r\n      if (value && value.length > 2) {\r\n        value = value.slice(0, 2)\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  changeCountry (event) {\r\n    const {value} = event.target\r\n    this.getStates(value)\r\n    this.setState({state: ''})\r\n  }\r\n\r\n  handleSubmit (event) {\r\n    event.preventDefault()\r\n\r\n    let form, addressButtn\r\n\r\n    switch (this.state.country) {\r\n      case 'BR':\r\n        form = this.brForm\r\n        addressButtn = this.brAddressButtn\r\n        break\r\n      case 'AE':\r\n      case 'SA':\r\n        form = this.alForm\r\n        addressButtn = this.alAddressButtn\r\n        break\r\n      default:\r\n        form = this.form\r\n        addressButtn = this.addressButtn\r\n        break\r\n    }\r\n\r\n    form.validateAll()\r\n\r\n    if (!addressButtn.context._errors || addressButtn.context._errors.length < 1) {\r\n      const {\r\n        name,\r\n        streetAddress1,\r\n        unit,\r\n        city,\r\n        zipCode,\r\n        state,\r\n        country,\r\n        phoneNumber,\r\n        defaultAddress,\r\n        phoneArea\r\n      } = this.state\r\n\r\n      this.props.editAddress({\r\n        name,\r\n        streetAddress1,\r\n        unit,\r\n        city,\r\n        zipCode,\r\n        state,\r\n        country,\r\n        phoneNumber,\r\n        defaultAddress,\r\n        phoneArea\r\n      })\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps (newProps) {\r\n    const {address} = newProps\r\n    this.initAddress(address)\r\n  }\r\n\r\n  componentWillMount () {\r\n    const {address} = this.props\r\n    this.initAddress(address)\r\n  }\r\n\r\n  initAddress (address) {\r\n    if (address) {\r\n      const {\r\n        name,\r\n        streetAddress1,\r\n        unit,\r\n        city,\r\n        zipCode,\r\n        phoneNumber,\r\n        isDefaultAddress,\r\n        country,\r\n        state,\r\n        phoneArea\r\n      } = address\r\n\r\n      const isStructotState = s => s && s.value && s.label\r\n      const countryValue = country ? country.value : ''\r\n\r\n      this.setState({\r\n        isEdit: true,\r\n        name,\r\n        streetAddress1,\r\n        unit,\r\n        city,\r\n        zipCode,\r\n        phoneNumber,\r\n        country: countryValue,\r\n        state: state ? state.value : '',\r\n        defaultAddress: isDefaultAddress,\r\n        phoneArea: phoneArea || ''\r\n      })\r\n\r\n      // if (isStructotState(state)) {\r\n      this.getStates(countryValue)\r\n      // }\r\n    } else {\r\n      this.setState({\r\n        country: getCountryCode()\r\n      })\r\n      this.getStates(getCountryCode())\r\n    }\r\n\r\n    getCountries().then(({result}) => {\r\n      this.setState({\r\n        countries: result\r\n      })\r\n    })\r\n  }\r\n\r\n  getStates (country) {\r\n    getStates(country).then(({result}) => {\r\n      this.setState({\r\n        states: result\r\n      })\r\n    })\r\n  }\r\n\r\n  formRef (c) {\r\n    this.form = c\r\n    if (this.props.needInitValidate && !this.state.hasValidated) {\r\n      this.form.validateAll()\r\n      this.setState({\r\n        hasValidated: true\r\n      })\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const {intl} = this.props\r\n\r\n    const isNormalAddress = ['BR', 'AE', 'SA'].indexOf(this.state.country) < 0\r\n\r\n    return <div>\r\n      <Form style={{...this.props.style, display: `${isNormalAddress ? 'block' : 'none'}`}} ref={this.formRef.bind(this)} onSubmit={this.handleSubmit.bind(this)}>\r\n        <FormLayout>\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'full_name'})}*\r\n            </label>\r\n            <Input\r\n              name='name'\r\n              value={this.state.name}\r\n              onChange={this.handleInputChange}\r\n              validations={[required]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'street_address'})}*\r\n            </label>\r\n            <Input\r\n              name='streetAddress1'\r\n              value={this.state.streetAddress1}\r\n              onChange={this.handleInputChange}\r\n              placeholder={intl.formatMessage({id: 'placeholder_street_address'})}\r\n              validations={[required]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'unit'})}\r\n            </label>\r\n            <Input\r\n              name='unit'\r\n              value={this.state.unit}\r\n              placeholder={intl.formatMessage({id: 'placeholder_unit'})}\r\n              onChange={this.handleInputChange}/>\r\n          </StyledControl>\r\n\r\n          <MultiControl>\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'country'})}*\r\n              </label>\r\n              <Select\r\n                className=\"x-select\"\r\n                value={this.state.country}\r\n                name='country'\r\n                onChange={(evt) => { this.handleInputChange(evt); this.changeCountry(evt) }}\r\n                validations={[required]}>\r\n                <option value=''>Country</option>\r\n                {\r\n                  this.state.countries && this.state.countries.map(country => (\r\n                    <option key={country.value} value={country.value} >{country.label}</option>\r\n                  ))\r\n                }\r\n\r\n              </Select>\r\n            </StyledControl>\r\n\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'state'})}\r\n              </label>\r\n\r\n              {\r\n                this.state.states && this.state.states.length ? (\r\n                  <Select\r\n                    className=\"x-select\"\r\n                    name='state'\r\n                    value={this.state.state}\r\n                    onChange={this.handleInputChange}\r\n                    validations={[required]}>\r\n                    <option value=''>State</option>\r\n                    {\r\n                      this.state.states && this.state.states.map(state => (\r\n                        <option key={state.value} value={state.value} >{state.label}</option>\r\n                      ))\r\n                    }\r\n\r\n                  </Select>\r\n\r\n                ) : (\r\n                  <Input\r\n                    name='state'\r\n                    value={this.state.state}\r\n                    onChange={this.handleInputChange}/>\r\n                )\r\n              }\r\n\r\n            </StyledControl>\r\n          </MultiControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'city'})}\r\n            </label>\r\n            <Input\r\n              name='city'\r\n              value={this.state.city}\r\n              onChange={this.handleInputChange}/>\r\n          </StyledControl>\r\n\r\n          <MultiControl>\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'zip_code'})}*\r\n              </label>\r\n              <Input\r\n                name='zipCode'\r\n                value={this.state.zipCode}\r\n                onChange={this.handleInputChange}\r\n                validations={[required, zip]}/>\r\n            </StyledControl>\r\n\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'phone_number'})}*\r\n              </label>\r\n              <Input\r\n                name='phoneNumber'\r\n                value={this.state.phoneNumber}\r\n                onChange={this.handleInputChange}\r\n                validations={[required, phone]}/>\r\n            </StyledControl>\r\n          </MultiControl>\r\n\r\n          <div>\r\n            <Button className=\"__submitbtn\" ref={c => this.addressButtn = c} ingoredisable=\"true\" style={{\r\n              display: 'block',\r\n              backgroundColor: '#222',\r\n              color: '#fff',\r\n              height: 40,\r\n              lineHeight: '40px',\r\n              textAlign: 'center',\r\n              outline: 'none',\r\n              border: 'none',\r\n              width: '100%'\r\n            }}>{intl.formatMessage({id: 'submit'})}</Button>\r\n          </div>\r\n        </FormLayout>\r\n      </Form>\r\n\r\n      <Form style={{...this.props.style, display: `${this.state.country === 'BR' ? 'block' : 'none'}`}} ref={c => { this.brForm = c }} onSubmit={this.handleSubmit.bind(this)}>\r\n        <FormLayout>\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'full_name'})}*\r\n            </label>\r\n            <Input\r\n              name='name'\r\n              value={this.state.name}\r\n              onChange={this.handleInputChange}\r\n              validations={[required]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'street_address'})}*\r\n            </label>\r\n            <Input\r\n              name='streetAddress1'\r\n              value={this.state.streetAddress1}\r\n              onChange={this.handleInputChange}\r\n              placeholder={intl.formatMessage({id: 'placeholder_street_address'})}\r\n              validations={[required]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'unit'})}\r\n            </label>\r\n            <Input\r\n              name='unit'\r\n              value={this.state.unit}\r\n              placeholder={intl.formatMessage({id: 'placeholder_unit'})}\r\n              onChange={this.handleInputChange}/>\r\n          </StyledControl>\r\n\r\n          <MultiControl>\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'country'})}*\r\n              </label>\r\n              <Select\r\n                className=\"x-select\"\r\n                value={this.state.country}\r\n                name='country'\r\n                onChange={(evt) => { this.handleInputChange(evt); this.changeCountry(evt) }}\r\n                validations={[required]}>\r\n                <option value=''>Country</option>\r\n                {\r\n                  this.state.countries && this.state.countries.map(country => (\r\n                    <option key={country.value} value={country.value} >{country.label}</option>\r\n                  ))\r\n                }\r\n\r\n              </Select>\r\n            </StyledControl>\r\n\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'state'})}\r\n              </label>\r\n\r\n              {\r\n                this.state.states && this.state.states.length ? (\r\n                  <Select\r\n                    className=\"x-select\"\r\n                    name='state'\r\n                    value={this.state.state}\r\n                    onChange={this.handleInputChange}\r\n                    validations={[required]}>\r\n                    <option value=''>State</option>\r\n                    {\r\n                      this.state.states && this.state.states.map(state => (\r\n                        <option key={state.value} value={state.value} >{state.label}</option>\r\n                      ))\r\n                    }\r\n\r\n                  </Select>\r\n\r\n                ) : (\r\n                  <Input\r\n                    name='state'\r\n                    value={this.state.state}\r\n                    onChange={this.handleInputChange}/>\r\n                )\r\n              }\r\n\r\n            </StyledControl>\r\n          </MultiControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'city'})}\r\n            </label>\r\n            <Input\r\n              name='city'\r\n              value={this.state.city}\r\n              onChange={this.handleInputChange}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'zip_code'})}*\r\n            </label>\r\n            <Input\r\n              name='zipCode'\r\n              value={this.state.zipCode}\r\n              onChange={this.handleInputChange}\r\n              validations={[required, zip]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'phone_number'})}*\r\n            </label>\r\n\r\n            <div>\r\n              <span style={{width: 59, display: 'inline-block'}}>BR +55</span>\r\n              <Input\r\n                divStyle={{width: 55, marginRight: 10, display: 'inline-block'}}\r\n                style={{paddingLeft: 0, textAlign: 'center'}}\r\n                name=\"phoneArea\"\r\n                placeholder=\"Código\"\r\n                type=\"number\"\r\n                maxLength={2}\r\n                value={this.state.phoneArea}\r\n                onChange={this.handleInputChange}\r\n                validations={[number]}/>\r\n\r\n              <Input\r\n                name='phoneNumber'\r\n                divStyle={{width: 'calc(100% - 124px)', display: 'inline-block', verticalAlign: 'top'}}\r\n                value={this.state.phoneNumber}\r\n                type=\"number\"\r\n                onChange={this.handleInputChange}\r\n                validations={[required, phone]}/>\r\n            </div>\r\n\r\n          </StyledControl>\r\n\r\n          <div>\r\n            <Button className=\"__submitbtn\" ref={c => this.brAddressButtn = c} ingoredisable=\"true\" style={{\r\n              display: 'block',\r\n              backgroundColor: '#222',\r\n              color: '#fff',\r\n              height: 40,\r\n              lineHeight: '40px',\r\n              textAlign: 'center',\r\n              outline: 'none',\r\n              border: 'none',\r\n              width: '100%'\r\n            }}>{intl.formatMessage({id: 'submit'})}</Button>\r\n          </div>\r\n        </FormLayout>\r\n      </Form>\r\n\r\n      <Form style={{...this.props.style, display: `${this.state.country === 'AE' || this.state.country === 'SA' ? 'block' : 'none'}`}} ref={c => { this.alForm = c }} onSubmit={this.handleSubmit.bind(this)}>\r\n        <FormLayout>\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'full_name'})}*\r\n            </label>\r\n            <Input\r\n              name='name'\r\n              value={this.state.name}\r\n              onChange={this.handleInputChange}\r\n              validations={[required]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'street_address'})}*\r\n            </label>\r\n            <Input\r\n              name='streetAddress1'\r\n              value={this.state.streetAddress1}\r\n              onChange={this.handleInputChange}\r\n              placeholder={intl.formatMessage({id: 'placeholder_street_address'})}\r\n              validations={[required]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'unit'})}\r\n            </label>\r\n            <Input\r\n              name='unit'\r\n              value={this.state.unit}\r\n              placeholder={intl.formatMessage({id: 'placeholder_unit'})}\r\n              onChange={this.handleInputChange}/>\r\n          </StyledControl>\r\n\r\n          <MultiControl>\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'country'})}*\r\n              </label>\r\n              <Select\r\n                className=\"x-select\"\r\n                value={this.state.country}\r\n                name='country'\r\n                onChange={(evt) => { this.handleInputChange(evt); this.changeCountry(evt) }}\r\n                validations={[required]}>\r\n                <option value=''>Country</option>\r\n                {\r\n                  this.state.countries && this.state.countries.map(country => (\r\n                    <option key={country.value} value={country.value} >{country.label}</option>\r\n                  ))\r\n                }\r\n\r\n              </Select>\r\n            </StyledControl>\r\n\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'state'})}\r\n              </label>\r\n\r\n              {\r\n                this.state.states && this.state.states.length ? (\r\n                  <Select\r\n                    className=\"x-select\"\r\n                    name='state'\r\n                    value={this.state.state}\r\n                    onChange={this.handleInputChange}\r\n                    validations={[required]}>\r\n                    <option value=''>State</option>\r\n                    {\r\n                      this.state.states && this.state.states.map(state => (\r\n                        <option key={state.value} value={state.value} >{state.label}</option>\r\n                      ))\r\n                    }\r\n\r\n                  </Select>\r\n\r\n                ) : (\r\n                  <Input\r\n                    name='state'\r\n                    value={this.state.state}\r\n                    onChange={this.handleInputChange}/>\r\n                )\r\n              }\r\n\r\n            </StyledControl>\r\n          </MultiControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'city'})}\r\n            </label>\r\n            <Input\r\n              name='city'\r\n              value={this.state.city}\r\n              onChange={this.handleInputChange}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'zip_code'})}*\r\n            </label>\r\n            <Input\r\n              name='zipCode'\r\n              value={this.state.zipCode}\r\n              onChange={this.handleInputChange}\r\n              validations={[required, zip]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'phone_number'})}*\r\n            </label>\r\n\r\n            <div>\r\n              {\r\n                this.state.country === 'AE' && <span style={{width: 69, display: 'inline-block', paddingTop: 10}}>UAE +971</span>\r\n              }\r\n\r\n              {\r\n                this.state.country === 'SA' && <span style={{width: 69, display: 'inline-block', paddingTop: 10}}>KSA +966</span>\r\n              }\r\n\r\n              <Input\r\n                name='phoneNumber'\r\n                divStyle={{width: 'calc(100% - 79px)', display: 'inline-block', verticalAlign: 'top'}}\r\n                value={this.state.phoneNumber}\r\n                type=\"number\"\r\n                onChange={this.handleInputChange}\r\n                validations={[required, phone]}/>\r\n            </div>\r\n\r\n          </StyledControl>\r\n\r\n          <div>\r\n            <Button className=\"__submitbtn\" ref={c => this.alAddressButtn = c} ingoredisable=\"true\" style={{\r\n              display: 'block',\r\n              backgroundColor: '#222',\r\n              color: '#fff',\r\n              height: 40,\r\n              lineHeight: '40px',\r\n              textAlign: 'center',\r\n              outline: 'none',\r\n              border: 'none',\r\n              width: '100%'\r\n            }}>{intl.formatMessage({id: 'submit'})}</Button>\r\n          </div>\r\n        </FormLayout>\r\n      </Form>\r\n\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default injectIntl(AdressForm)\r\n"],"sourceRoot":""}