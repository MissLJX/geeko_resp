{"version":3,"sources":["webpack:///./src/components/msite/full-fixed.jsx","webpack:///./src/components/msite/control.jsx","webpack:///./src/components/validator.jsx","webpack:///./src/components/msite/styled-control.jsx","webpack:///./src/pages/order-address.jsx","webpack:///./src/components/msite/address-form.jsx"],"names":["__webpack_require__","u","c","d","e","__esModule","default","f","t","Object","freeze","defineProperties","raw","value","Fixed","styled","div","_templateObject","HD","_templateObject2","Title","h1","_templateObject3","Close","span","_templateObject4","BD","_templateObject5","props","_react2","createElement","title","onClick","onClose","_icon2","style","fontSize","cursor","children","o","a","_reactValidation","s","n","indexOf","prototype","hasOwnProperty","call","Form","form","_ref","getValues","validate","validateAll","showError","hideError","_objectWithoutProperties","Input","control","_ref2","error","isChanged","isUsed","divStyle","className","_extends","Select","_ref4","Button","button","_ref3","hasErrors","disabled","ingoredisable","r","l","__reg_zip_us__","__reg_zip_uk__","__reg_zip_br__","__reg_phone_normal__","__reg_phone_br__","__reg_phone_ae_","__reg_phone_sa_","cpfcheck","result","replace","invalidos","i","length","add","parseInt","charAt","rev","required","toString","trim","number","validator","isInt","min","max","email","isEmail","cpf","zip","components","reg","country","test","phone","StyledControl","inputColor","InlineStyledControl","499","defineProperty","assign","arguments","enumerable","configurable","writable","key","g","_reactRedux","_actions","h","_api","_reactIntl","Modal","this","_this","__proto__","getPrototypeOf","close","bind","editAddress","TypeError","create","constructor","setPrototypeOf","React","Component","_createClass","evt","preventDefault","history","goBack","address","_this2","transactionId","transaction","orderVos","order","updateorderaddress","id","orderNo","then","REFRESHORDERCONFIRM","catch","alert","_props","intl","FormBody","_fullFixed2","formatMessage","_addressForm2","marginTop","connect","state","shippingDetail","dispatch","fetchTransaction","injectIntl","_control","_validator","_styledControl","_layout","getCountryCode","window","lang","split","AdressForm","isEdit","name","streetAddress1","unit","city","zipCode","phoneNumber","defaultAddress","countries","states","phoneArea","hasValidated","handleInputChange","event","target","type","checked","strs","splice","join","slice","setState","getStates","addressButtn","brForm","brAddressButtn","alForm","alAddressButtn","context","_errors","_state","newProps","initAddress","isDefaultAddress","countryValue","getCountries","_this3","needInitValidate","_this4","isNormalAddress","display","ref","formRef","onSubmit","handleSubmit","FormLayout","onChange","validations","placeholder","MultiControl","changeCountry","map","label","backgroundColor","color","height","lineHeight","textAlign","outline","border","width","marginRight","paddingLeft","maxLength","verticalAlign","paddingTop"],"mappings":"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","file":"component--order-address.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Icon from '../icon.jsx'\r\n\r\nconst Fixed = styled.div`\r\n\tposition: relative;\r\n\t\r\n`\r\n\r\nconst HD = styled.div`\r\n\theight: 50px;\r\n\tline-height: 50px;\r\n\tposition: absolute;\r\n\ttop: 0;\r\n\twidth: 100%;\r\n\tbackground-color: #fff;\r\n\tz-index: 10;\r\n`\r\n\r\nconst Title = styled.h1`\r\n\tfont-size: 18px;\r\n\tfont-weight: 400;\r\n\ttext-align: center;\r\n`\r\n\r\nconst Close = styled.span`\r\n\tdisplay: inline-block;\r\n\tposition: absolute;\r\n\tright: 10px;\r\n\ttop: 0;\r\n\tcursor: pointer;\r\n`\r\n\r\nconst BD = styled.div`\r\n\theight: 100vh;\r\n\toverflow: auto;\r\n\tpadding-top: 50px;\r\n\t-webkit-overflow-scrolling: touch;\r\n`\r\n\r\nexport default (props) => <Fixed>\r\n  <HD>\r\n    <Title>{props.title}</Title>\r\n    <Close onClick={props.onClose}><Icon style={{fontSize: 25, cursor: 'pointer'}}>&#xe69a;</Icon></Close>\r\n  </HD>\r\n\r\n  <BD>\r\n  \t{props.children}\r\n  </BD>\r\n</Fixed>\r\n","import React from 'react'\r\nimport { form, control, button } from 'react-validation'\r\n\r\nconst _form = ({ getValues, validate, validateAll, showError, hideError, children, ...props }) => ( // destruct non-valid props\r\n  <form {...props}>{children}</form>\r\n)\r\n\r\nconst _input = ({ error, isChanged, isUsed, divStyle, ...props }) => (\r\n  <div className={isChanged && isUsed && error ? 'error' : ''} style={divStyle}>\r\n    <input {...props} className=\"x-default-input\"/>\r\n    <p>{isChanged && isUsed && error}</p>\r\n  </div>\r\n)\r\n\r\nconst _button = ({ hasErrors, ...props }) => {\r\n  return (\r\n    <button {...props} disabled={hasErrors && !props.ingoredisable}/>\r\n  )\r\n}\r\n\r\nconst _select = ({ error, isChanged, isUsed, ...props }) => (\r\n  <div className={isChanged && isUsed && error ? 'error' : ''}>\r\n    <select {...props} />\r\n    <p>{isChanged && isUsed && error}</p>\r\n  </div>\r\n)\r\n\r\nexport const Form = form(_form)\r\nexport const Input = control(_input)\r\nexport const Select = control(_select)\r\nexport const Button = button(_button)\r\n","import React from 'react'\r\nimport validator from 'validator'\r\n\r\nexport const __reg_zip_us__ = /^(([0-9]{5})|([0-9]{5}-[0-9]{4}))$/\r\nexport const __reg_zip_uk__ = /^([a-z]|[A-Z]){1,2}\\w{1,2}\\s{0,1}[0-9]{1}([a-z]|[A-Z]){2}$/\r\nexport const __reg_zip_br__ = /^[0-9]{5}-[0-9]{3}$/\r\n\r\nexport const __reg_phone_normal__ = /^\\d{1,20}$/\r\nexport const __reg_phone_br__ = /^\\d{8,9}$/\r\nexport const __reg_phone_ae_ = /^(50|52|54|55|56|58|2|3|4|6|7|9){1,2}\\d{7}$/\r\nexport const __reg_phone_sa_ = /^(50|53|55|51|58|59|54|56|57|11|12|13|14|16|17|811){1,3}\\d{7}$/\r\n\r\nexport const cpfcheck = (value) => {\r\n  var result = true\r\n\r\n  value = value.replace('-', '')\r\n  value = value.replace(/\\./g, '')\r\n\r\n  // this is mostly not needed\r\n  var invalidos = [ '11111111111', '22222222222', '33333333333',\r\n    '44444444444', '55555555555', '66666666666',\r\n    '77777777777', '88888888888', '99999999999',\r\n    '00000000000' ]\r\n\r\n  for (let i = 0; i < invalidos.length; i++) {\r\n    if (invalidos[i] == value) {\r\n      result = false\r\n    }\r\n  }\r\n\r\n  if (value.length > 11) {\r\n    result = false\r\n  }\r\n\r\n  // validando primeiro digito\r\n  let add = 0\r\n  for (let i = 0; i < 9; i++) {\r\n    add += parseInt(value.charAt(i), 10) * (10 - i)\r\n  }\r\n  let rev = 11 - (add % 11)\r\n  if (rev == 10 || rev == 11) {\r\n    rev = 0\r\n  }\r\n  if (rev != parseInt(value.charAt(9), 10)) {\r\n    result = false\r\n  }\r\n\r\n  // validando segundo digito\r\n  add = 0\r\n  for (let i = 0; i < 10; i++) {\r\n    add += parseInt(value.charAt(i), 10) * (11 - i)\r\n  }\r\n  rev = 11 - (add % 11)\r\n  if (rev == 10 || rev == 11) {\r\n    rev = 0\r\n  }\r\n  if (rev != parseInt(value.charAt(10), 10)) {\r\n    result = false\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport const required = (value) => {\r\n  if (!value || !value.toString().trim().length) {\r\n    return 'required'\r\n  }\r\n}\r\n\r\nexport const number = (value) => {\r\n  if (value && !validator.isInt(value, {min: 0, max: 99})) {\r\n    return <p></p>\r\n  }\r\n}\r\n\r\nexport const email = (value) => {\r\n  if (!validator.isEmail(value)) {\r\n    return <p>{value} is not a valid email</p>\r\n  }\r\n}\r\n\r\nexport const cpf = (value) => {\r\n  if (!cpfcheck(value)) { return <p>{value} is not a valid cpf</p> }\r\n}\r\n\r\nexport const zip = (value, props, components) => {\r\n  const country = components['country'][0].value\r\n  let reg, error\r\n  switch (country) {\r\n  \tcase 'US':\r\n  \t\treg = __reg_zip_us__\r\n  \t\terror = `Please enter 5 digits or 5 digits with a 4-digits number (E.g. 20001 or 20001-0000)`\r\n  \t\tbreak\r\n  \tcase 'GB':\r\n  \t\treg = __reg_zip_uk__\r\n  \t\terror = `Wrong ZIP CODE! Please offer us one or two-letter and one-two figures with a space end with one figure and two letters. (e.g. TN37 7HL,CW8 3AD)`\r\n  \t\tbreak\r\n  \tcase 'BR':\r\n  \t\treg = __reg_zip_br__\r\n  \t\terror = `O formato do endereço está incorreto, preencha o formulário de [01310-000]`\r\n  \t\tbreak\r\n  \tdefault:\r\n  \t\tbreak\r\n  }\r\n\r\n  if (reg && !reg.test(value)) {\r\n    return error\r\n  }\r\n}\r\n\r\nexport const phone = (value, props, components) => {\r\n  const country = components['country'][0].value\r\n  let reg, error\r\n  switch (country) {\r\n    case 'BR':\r\n      reg = __reg_phone_br__\r\n      error = `Insira pelo menos 8-9 números.`\r\n      break\r\n    case 'AE':\r\n      reg = __reg_phone_ae_\r\n      error = `Phone numbers should start with 50/52/54/55/56/58/2/3/4/6/7/9, followed by any 7 digits.`\r\n      break\r\n    case 'SA':\r\n      reg = __reg_phone_sa_\r\n      error = `Phone numbers should start with 50/53/55/51/58/59/54/56/57/11/12/13/14/16/17/811, followed by any 7 digits.`\r\n      break\r\n    default:\r\n      reg = __reg_phone_normal__\r\n      error = `Incorrect phone number format (numbers only, no formatting)`\r\n      break\r\n  }\r\n  if (reg && !reg.test(value)) {\r\n    return error\r\n  }\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const StyledControl = styled.div`\r\n\tlabel{\r\n\t\tfont-size: 12px;\r\n\t\tmargin-bottom: 5px;\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n\tinput, select{\r\n\t\tborder: 1px solid #666;\r\n\t\toutline: none;\r\n\t\t-webkit-appearance: none;\r\n    \toutline: none;\r\n    \tbox-shadow: none;\r\n    \theight: 35px;\r\n    \twidth: 100%;\r\n    \tpadding-left: 10px;\r\n    \tbackground-color: ${props => props.inputColor || 'transparent'};\r\n\t}\r\n\r\n\r\n\t& .error{\r\n\t\tp{\r\n\t\t\tfont-size: 12px;\r\n\t\t\tmargin-top: 5px;\r\n\t\t\tcolor: #E64545;\r\n\t\t}\r\n\t\tinput, select{\r\n\t\t\tborder: 1px solid #E64545;\r\n    \t\tbox-shadow: inset 0 0 1px #E64545;\r\n\t\t}\r\n\t}\r\n`\r\n\r\nexport const InlineStyledControl = styled.div`\r\n\tdisplay: inline-block;\r\n\tlabel{\r\n\t\tfont-size: 12px;\r\n\t\tmargin-right: 10px;\r\n\t}\r\n\r\n\tinput, select{\r\n\t\tborder: 1px solid #666;\r\n\t\toutline: none;\r\n\t\t-webkit-appearance: none;\r\n    \toutline: none;\r\n    \tbox-shadow: none;\r\n    \theight: 35px;\r\n    \twidth: 100%;\r\n    \tpadding-left: 10px;\r\n    \tbackground-color: ${props => props.inputColor || 'transparent'};\r\n\t}\r\n\r\n\r\n\t& .error{\r\n\t\tp{\r\n\t\t\tfont-size: 12px;\r\n\t\t\tmargin-top: 5px;\r\n\t\t\tcolor: #e5004f;\r\n\t\t}\r\n\t\tinput, select{\r\n\t\t\tborder: 1px solid #e5004f;\r\n    \t\tbox-shadow: inset 0 0 1px #e5004f;\r\n\t\t}\r\n\t}\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { connect } from 'react-redux'\r\nimport {fetchTransaction} from '../store/actions.js'\r\nimport FullFixed from '../components/msite/full-fixed.jsx'\r\nimport AddressForm from '../components/msite/address-form.jsx'\r\nimport {updateorderaddress} from '../api'\r\nimport {injectIntl} from 'react-intl'\r\nimport {__route_root__} from '../utils/utils.js'\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    transaction: state.transaction,\r\n    address: state.transaction ? state.transaction.orderVos[0].order.shippingDetail : null\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    REFRESHORDERCONFIRM: (transactionId) => {\r\n      dispatch(fetchTransaction(transactionId))\r\n    }\r\n  }\r\n}\r\n\r\nconst Modal = class extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.close = this.close.bind(this)\r\n    this.editAddress = this.editAddress.bind(this)\r\n  }\r\n\r\n  close (evt) {\r\n  \tevt.preventDefault()\r\n    this.props.history.goBack()\r\n  }\r\n\r\n  editAddress (address) {\r\n    const transactionId = this.props.transaction.orderVos[0].order.transactionId\r\n  \t\tupdateorderaddress({...address, id: this.props.address.id, orderNo: transactionId }).then(() => {\r\n  \t\t\tthis.props.history.goBack()\r\n      this.props.REFRESHORDERCONFIRM(transactionId)\r\n  \t\t}).catch(({result}) => {\r\n  \t\t\talert(result)\r\n  \t\t})\r\n  }\r\n\r\n  render () {\r\n    const { address, intl } = this.props\r\n\r\n    const FormBody = styled.div`\r\n    \tmax-width: 320px;\r\n    \twidth: 80%;\r\n    \tmargin-left: auto;\r\n    \tmargin-right: auto;\r\n      padding-bottom: 50px;\r\n\r\n    `\r\n\r\n    return <FullFixed onClose={this.close} title={intl.formatMessage({id: 'address'})}>\r\n\r\n    \t<FormBody >\r\n\t    \t<p>* {intl.formatMessage({id: 'required_tips'})}</p>\r\n\t    \t<AddressForm editAddress={this.editAddress} style={{marginTop: 15}} address={address}/>\r\n    \t</FormBody>\r\n\r\n    </FullFixed>\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Modal))\r\n","import React from 'react'\r\nimport {Form, Input, Select, Button} from './control.jsx'\r\nimport {required, email, zip, phone, number} from '../validator.jsx'\r\nimport {StyledControl} from './styled-control.jsx'\r\nimport {FormLayout, MultiControl} from './layout.jsx'\r\nimport {getCountries, getStates} from '../../api'\r\nimport {injectIntl} from 'react-intl'\r\n\r\nconst getCountryCode = () => {\r\n  let strs = window.lang ? window.lang.split('_') : []\r\n  return strs[1] || 'US'\r\n}\r\n\r\nconst AdressForm = class extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      isEdit: false,\r\n      name: '',\r\n      streetAddress1: '',\r\n      unit: '',\r\n      city: '',\r\n      zipCode: '',\r\n      state: '',\r\n      country: '',\r\n      phoneNumber: '',\r\n      defaultAddress: false,\r\n      countries: null,\r\n      states: null,\r\n      phoneArea: '',\r\n      hasValidated: false\r\n    }\r\n    this.handleInputChange = this.handleInputChange.bind(this)\r\n  }\r\n\r\n  handleInputChange (event) {\r\n    const target = event.target\r\n    let value = target.type === 'checkbox' ? target.checked : target.value\r\n    const name = target.name\r\n    if (name === 'zipCode' && this.state.country === 'BR') {\r\n      if (value && value.length > 5) {\r\n        var strs = value.replace(/-/ig, '').split('')\r\n        strs.splice(5, 0, '-')\r\n        value = strs.join('')\r\n      }\r\n    }\r\n\r\n    if (name === 'phoneArea') {\r\n      if (value && value.length > 2) {\r\n        value = value.slice(0, 2)\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      [name]: value\r\n    })\r\n  }\r\n\r\n  changeCountry (event) {\r\n    const {value} = event.target\r\n    this.getStates(value)\r\n    this.setState({state: ''})\r\n  }\r\n\r\n  handleSubmit (event) {\r\n    event.preventDefault()\r\n\r\n    let form, addressButtn\r\n\r\n    switch (this.state.country) {\r\n      case 'BR':\r\n        form = this.brForm\r\n        addressButtn = this.brAddressButtn\r\n        break\r\n      case 'AE':\r\n      case 'SA':\r\n        form = this.alForm\r\n        addressButtn = this.alAddressButtn\r\n        break\r\n      default:\r\n        form = this.form\r\n        addressButtn = this.addressButtn\r\n        break\r\n    }\r\n\r\n    form.validateAll()\r\n\r\n    if (!addressButtn.context._errors || addressButtn.context._errors.length < 1) {\r\n      const {\r\n        name,\r\n        streetAddress1,\r\n        unit,\r\n        city,\r\n        zipCode,\r\n        state,\r\n        country,\r\n        phoneNumber,\r\n        defaultAddress,\r\n        phoneArea\r\n      } = this.state\r\n\r\n      this.props.editAddress({\r\n        name,\r\n        streetAddress1,\r\n        unit,\r\n        city,\r\n        zipCode,\r\n        state,\r\n        country,\r\n        phoneNumber,\r\n        defaultAddress,\r\n        phoneArea\r\n      })\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps (newProps) {\r\n    const {address} = newProps\r\n    this.initAddress(address)\r\n  }\r\n\r\n  componentWillMount () {\r\n    const {address} = this.props\r\n    this.initAddress(address)\r\n  }\r\n\r\n  initAddress (address) {\r\n    if (address) {\r\n      const {\r\n        name,\r\n        streetAddress1,\r\n        unit,\r\n        city,\r\n        zipCode,\r\n        phoneNumber,\r\n        isDefaultAddress,\r\n        country,\r\n        state,\r\n        phoneArea\r\n      } = address\r\n\r\n      const isStructotState = s => s && s.value && s.label\r\n      const countryValue = country ? country.value : ''\r\n\r\n      this.setState({\r\n        isEdit: true,\r\n        name,\r\n        streetAddress1,\r\n        unit,\r\n        city,\r\n        zipCode,\r\n        phoneNumber,\r\n        country: countryValue,\r\n        state: state ? state.value : '',\r\n        defaultAddress: isDefaultAddress,\r\n        phoneArea: phoneArea || ''\r\n      })\r\n\r\n      // if (isStructotState(state)) {\r\n      this.getStates(countryValue)\r\n      // }\r\n    } else {\r\n      this.setState({\r\n        country: getCountryCode()\r\n      })\r\n      this.getStates(getCountryCode())\r\n    }\r\n\r\n    getCountries().then(({result}) => {\r\n      this.setState({\r\n        countries: result\r\n      })\r\n    })\r\n  }\r\n\r\n  getStates (country) {\r\n    getStates(country).then(({result}) => {\r\n      this.setState({\r\n        states: result\r\n      })\r\n    })\r\n  }\r\n\r\n  formRef (c) {\r\n    this.form = c\r\n    if (this.props.needInitValidate && !this.state.hasValidated) {\r\n      this.form.validateAll()\r\n      this.setState({\r\n        hasValidated: true\r\n      })\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const {intl} = this.props\r\n\r\n    const isNormalAddress = ['BR', 'AE', 'SA'].indexOf(this.state.country) < 0\r\n\r\n    return <div>\r\n      <Form style={{...this.props.style, display: `${isNormalAddress ? 'block' : 'none'}`}} ref={this.formRef.bind(this)} onSubmit={this.handleSubmit.bind(this)}>\r\n        <FormLayout>\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'full_name'})}*\r\n            </label>\r\n            <Input\r\n              name='name'\r\n              value={this.state.name}\r\n              onChange={this.handleInputChange}\r\n              validations={[required]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'street_address'})}*\r\n            </label>\r\n            <Input\r\n              name='streetAddress1'\r\n              value={this.state.streetAddress1}\r\n              onChange={this.handleInputChange}\r\n              placeholder={intl.formatMessage({id: 'placeholder_street_address'})}\r\n              validations={[required]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'unit'})}\r\n            </label>\r\n            <Input\r\n              name='unit'\r\n              value={this.state.unit}\r\n              placeholder={intl.formatMessage({id: 'placeholder_unit'})}\r\n              onChange={this.handleInputChange}/>\r\n          </StyledControl>\r\n\r\n          <MultiControl>\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'country'})}*\r\n              </label>\r\n              <Select\r\n                className=\"x-select\"\r\n                value={this.state.country}\r\n                name='country'\r\n                onChange={(evt) => { this.handleInputChange(evt); this.changeCountry(evt) }}\r\n                validations={[required]}>\r\n                <option value=''>Country</option>\r\n                {\r\n                  this.state.countries && this.state.countries.map(country => (\r\n                    <option key={country.value} value={country.value} >{country.label}</option>\r\n                  ))\r\n                }\r\n\r\n              </Select>\r\n            </StyledControl>\r\n\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'state'})}\r\n              </label>\r\n\r\n              {\r\n                this.state.states && this.state.states.length ? (\r\n                  <Select\r\n                    className=\"x-select\"\r\n                    name='state'\r\n                    value={this.state.state}\r\n                    onChange={this.handleInputChange}\r\n                    validations={[required]}>\r\n                    <option value=''>State</option>\r\n                    {\r\n                      this.state.states && this.state.states.map(state => (\r\n                        <option key={state.value} value={state.value} >{state.label}</option>\r\n                      ))\r\n                    }\r\n\r\n                  </Select>\r\n\r\n                ) : (\r\n                  <Input\r\n                    name='state'\r\n                    value={this.state.state}\r\n                    onChange={this.handleInputChange}/>\r\n                )\r\n              }\r\n\r\n            </StyledControl>\r\n          </MultiControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'city'})}\r\n            </label>\r\n            <Input\r\n              name='city'\r\n              value={this.state.city}\r\n              onChange={this.handleInputChange}/>\r\n          </StyledControl>\r\n\r\n          <MultiControl>\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'zip_code'})}*\r\n              </label>\r\n              <Input\r\n                name='zipCode'\r\n                value={this.state.zipCode}\r\n                onChange={this.handleInputChange}\r\n                validations={[required, zip]}/>\r\n            </StyledControl>\r\n\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'phone_number'})}*\r\n              </label>\r\n              <Input\r\n                name='phoneNumber'\r\n                value={this.state.phoneNumber}\r\n                onChange={this.handleInputChange}\r\n                validations={[required, phone]}/>\r\n            </StyledControl>\r\n          </MultiControl>\r\n\r\n          <div>\r\n            <Button className=\"__submitbtn\" ref={c => this.addressButtn = c} ingoredisable=\"true\" style={{\r\n              display: 'block',\r\n              backgroundColor: '#222',\r\n              color: '#fff',\r\n              height: 40,\r\n              lineHeight: '40px',\r\n              textAlign: 'center',\r\n              outline: 'none',\r\n              border: 'none',\r\n              width: '100%'\r\n            }}>{intl.formatMessage({id: 'submit'})}</Button>\r\n          </div>\r\n        </FormLayout>\r\n      </Form>\r\n\r\n      <Form style={{...this.props.style, display: `${this.state.country === 'BR' ? 'block' : 'none'}`}} ref={c => { this.brForm = c }} onSubmit={this.handleSubmit.bind(this)}>\r\n        <FormLayout>\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'full_name'})}*\r\n            </label>\r\n            <Input\r\n              name='name'\r\n              value={this.state.name}\r\n              onChange={this.handleInputChange}\r\n              validations={[required]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'street_address'})}*\r\n            </label>\r\n            <Input\r\n              name='streetAddress1'\r\n              value={this.state.streetAddress1}\r\n              onChange={this.handleInputChange}\r\n              placeholder={intl.formatMessage({id: 'placeholder_street_address'})}\r\n              validations={[required]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'unit'})}\r\n            </label>\r\n            <Input\r\n              name='unit'\r\n              value={this.state.unit}\r\n              placeholder={intl.formatMessage({id: 'placeholder_unit'})}\r\n              onChange={this.handleInputChange}/>\r\n          </StyledControl>\r\n\r\n          <MultiControl>\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'country'})}*\r\n              </label>\r\n              <Select\r\n                className=\"x-select\"\r\n                value={this.state.country}\r\n                name='country'\r\n                onChange={(evt) => { this.handleInputChange(evt); this.changeCountry(evt) }}\r\n                validations={[required]}>\r\n                <option value=''>Country</option>\r\n                {\r\n                  this.state.countries && this.state.countries.map(country => (\r\n                    <option key={country.value} value={country.value} >{country.label}</option>\r\n                  ))\r\n                }\r\n\r\n              </Select>\r\n            </StyledControl>\r\n\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'state'})}\r\n              </label>\r\n\r\n              {\r\n                this.state.states && this.state.states.length ? (\r\n                  <Select\r\n                    className=\"x-select\"\r\n                    name='state'\r\n                    value={this.state.state}\r\n                    onChange={this.handleInputChange}\r\n                    validations={[required]}>\r\n                    <option value=''>State</option>\r\n                    {\r\n                      this.state.states && this.state.states.map(state => (\r\n                        <option key={state.value} value={state.value} >{state.label}</option>\r\n                      ))\r\n                    }\r\n\r\n                  </Select>\r\n\r\n                ) : (\r\n                  <Input\r\n                    name='state'\r\n                    value={this.state.state}\r\n                    onChange={this.handleInputChange}/>\r\n                )\r\n              }\r\n\r\n            </StyledControl>\r\n          </MultiControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'city'})}\r\n            </label>\r\n            <Input\r\n              name='city'\r\n              value={this.state.city}\r\n              onChange={this.handleInputChange}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'zip_code'})}*\r\n            </label>\r\n            <Input\r\n              name='zipCode'\r\n              value={this.state.zipCode}\r\n              onChange={this.handleInputChange}\r\n              validations={[required, zip]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'phone_number'})}*\r\n            </label>\r\n\r\n            <div>\r\n              <span style={{width: 59, display: 'inline-block'}}>BR +55</span>\r\n              <Input\r\n                divStyle={{width: 55, marginRight: 10, display: 'inline-block'}}\r\n                style={{paddingLeft: 0, textAlign: 'center'}}\r\n                name=\"phoneArea\"\r\n                placeholder=\"Código\"\r\n                type=\"number\"\r\n                maxLength={2}\r\n                value={this.state.phoneArea}\r\n                onChange={this.handleInputChange}\r\n                validations={[number]}/>\r\n\r\n              <Input\r\n                name='phoneNumber'\r\n                divStyle={{width: 'calc(100% - 124px)', display: 'inline-block', verticalAlign: 'top'}}\r\n                value={this.state.phoneNumber}\r\n                type=\"number\"\r\n                onChange={this.handleInputChange}\r\n                validations={[required, phone]}/>\r\n            </div>\r\n\r\n          </StyledControl>\r\n\r\n          <div>\r\n            <Button className=\"__submitbtn\" ref={c => this.brAddressButtn = c} ingoredisable=\"true\" style={{\r\n              display: 'block',\r\n              backgroundColor: '#222',\r\n              color: '#fff',\r\n              height: 40,\r\n              lineHeight: '40px',\r\n              textAlign: 'center',\r\n              outline: 'none',\r\n              border: 'none',\r\n              width: '100%'\r\n            }}>{intl.formatMessage({id: 'submit'})}</Button>\r\n          </div>\r\n        </FormLayout>\r\n      </Form>\r\n\r\n      <Form style={{...this.props.style, display: `${this.state.country === 'AE' || this.state.country === 'SA' ? 'block' : 'none'}`}} ref={c => { this.alForm = c }} onSubmit={this.handleSubmit.bind(this)}>\r\n        <FormLayout>\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'full_name'})}*\r\n            </label>\r\n            <Input\r\n              name='name'\r\n              value={this.state.name}\r\n              onChange={this.handleInputChange}\r\n              validations={[required]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'street_address'})}*\r\n            </label>\r\n            <Input\r\n              name='streetAddress1'\r\n              value={this.state.streetAddress1}\r\n              onChange={this.handleInputChange}\r\n              placeholder={intl.formatMessage({id: 'placeholder_street_address'})}\r\n              validations={[required]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'unit'})}\r\n            </label>\r\n            <Input\r\n              name='unit'\r\n              value={this.state.unit}\r\n              placeholder={intl.formatMessage({id: 'placeholder_unit'})}\r\n              onChange={this.handleInputChange}/>\r\n          </StyledControl>\r\n\r\n          <MultiControl>\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'country'})}*\r\n              </label>\r\n              <Select\r\n                className=\"x-select\"\r\n                value={this.state.country}\r\n                name='country'\r\n                onChange={(evt) => { this.handleInputChange(evt); this.changeCountry(evt) }}\r\n                validations={[required]}>\r\n                <option value=''>Country</option>\r\n                {\r\n                  this.state.countries && this.state.countries.map(country => (\r\n                    <option key={country.value} value={country.value} >{country.label}</option>\r\n                  ))\r\n                }\r\n\r\n              </Select>\r\n            </StyledControl>\r\n\r\n            <StyledControl>\r\n              <label>\r\n                {intl.formatMessage({id: 'state'})}\r\n              </label>\r\n\r\n              {\r\n                this.state.states && this.state.states.length ? (\r\n                  <Select\r\n                    className=\"x-select\"\r\n                    name='state'\r\n                    value={this.state.state}\r\n                    onChange={this.handleInputChange}\r\n                    validations={[required]}>\r\n                    <option value=''>State</option>\r\n                    {\r\n                      this.state.states && this.state.states.map(state => (\r\n                        <option key={state.value} value={state.value} >{state.label}</option>\r\n                      ))\r\n                    }\r\n\r\n                  </Select>\r\n\r\n                ) : (\r\n                  <Input\r\n                    name='state'\r\n                    value={this.state.state}\r\n                    onChange={this.handleInputChange}/>\r\n                )\r\n              }\r\n\r\n            </StyledControl>\r\n          </MultiControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'city'})}\r\n            </label>\r\n            <Input\r\n              name='city'\r\n              value={this.state.city}\r\n              onChange={this.handleInputChange}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'zip_code'})}*\r\n            </label>\r\n            <Input\r\n              name='zipCode'\r\n              value={this.state.zipCode}\r\n              onChange={this.handleInputChange}\r\n              validations={[required, zip]}/>\r\n          </StyledControl>\r\n\r\n          <StyledControl>\r\n            <label>\r\n              {intl.formatMessage({id: 'phone_number'})}*\r\n            </label>\r\n\r\n            <div>\r\n              {\r\n                this.state.country === 'AE' && <span style={{width: 69, display: 'inline-block', paddingTop: 10}}>UAE +971</span>\r\n              }\r\n\r\n              {\r\n                this.state.country === 'SA' && <span style={{width: 69, display: 'inline-block', paddingTop: 10}}>KSA +966</span>\r\n              }\r\n\r\n              <Input\r\n                name='phoneNumber'\r\n                divStyle={{width: 'calc(100% - 79px)', display: 'inline-block', verticalAlign: 'top'}}\r\n                value={this.state.phoneNumber}\r\n                type=\"number\"\r\n                onChange={this.handleInputChange}\r\n                validations={[required, phone]}/>\r\n            </div>\r\n\r\n          </StyledControl>\r\n\r\n          <div>\r\n            <Button className=\"__submitbtn\" ref={c => this.alAddressButtn = c} ingoredisable=\"true\" style={{\r\n              display: 'block',\r\n              backgroundColor: '#222',\r\n              color: '#fff',\r\n              height: 40,\r\n              lineHeight: '40px',\r\n              textAlign: 'center',\r\n              outline: 'none',\r\n              border: 'none',\r\n              width: '100%'\r\n            }}>{intl.formatMessage({id: 'submit'})}</Button>\r\n          </div>\r\n        </FormLayout>\r\n      </Form>\r\n\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default injectIntl(AdressForm)\r\n"],"sourceRoot":""}